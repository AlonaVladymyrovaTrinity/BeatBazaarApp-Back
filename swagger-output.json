{
  "swagger": "2.0",
  "info": {
    "title": "My API",
    "description": "Description",
    "version": "1.0.0"
  },
  "host": "localhost:8000",
  "basePath": "/",
  "schemes": ["http"],
  "paths": {
    "/api/v1/auth/register": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Register a new user",
        "description": "",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User registration information",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "John Doe"
                },
                "email": {
                  "type": "string",
                  "example": "jdoe@example.com"
                },
                "password": {
                  "type": "string",
                  "example": "supersecretpassword"
                },
                "username": {
                  "type": "string",
                  "example": "jdoe99"
                }
              },
              "required": ["name", "email", "password", "username"]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User registered successfully",
            "schema": {
              "$ref": "#/definitions/TokenizedUser"
            }
          },
          "400": {
            "description": "Bad request, missing email, name, password, or username"
          }
        }
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Login as a user",
        "description": "",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User email and password for login",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "jdoe@example.com"
                },
                "password": {
                  "type": "string",
                  "example": "supersecretpassword"
                }
              },
              "required": ["email", "password"]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User logged in successfully",
            "schema": {
              "$ref": "#/definitions/TokenizedUser"
            }
          },
          "400": {
            "description": "Bad request, missing email or password"
          },
          "401": {
            "description": "Unauthorized, invalid credentials"
          }
        }
      }
    },
    "/api/v1/auth/logout": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Logout a user",
        "description": "This endpoint checks for a signed JWT token in an HTTP-only cookie and clears it. It checks the `token` field in the cookie.",
        "responses": {
          "200": {
            "description": "User logged out successfully",
            "schema": {
              "type": "object",
              "properties": {
                "msg": {
                  "type": "string",
                  "example": "user logged out!"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/v1/users/": {
      "get": {
        "tags": ["Users"],
        "summary": "Fetch all registered users in a database whose role is user (exclude admins)",
        "description": "**ROLE REQUIRED:** admin",
        "responses": {
          "200": {
            "description": "Users successfully fetched.",
            "schema": {
              "type": "object",
              "properties": {
                "users": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/PasswordlessUser"
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/api/v1/users/showMe": {
      "get": {
        "tags": ["Users"],
        "summary": "Returns information about the requesting user based on cookie session",
        "description": "",
        "responses": {
          "200": {
            "description": "User successfully fetched.",
            "schema": {
              "type": "object",
              "properties": {
                "user": {
                  "$ref": "#/definitions/PasswordlessUser"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "No user with id found."
          }
        }
      }
    },
    "/api/v1/users/showMe/withAlbums": {
      "get": {
        "tags": ["Users"],
        "summary": "Fetch a user by id and all albums they purchased.",
        "description": "",
        "responses": {
          "200": {
            "description": "User and their albums purchased fetched successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "user": {
                  "$ref": "#/definitions/UserWithAlbums"
                },
                "purchasedAlbumCount": {
                  "type": "number",
                  "example": 1
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "No user with id found."
          }
        }
      }
    },
    "/api/v1/users/updateCurrentUser": {
      "patch": {
        "tags": ["Users"],
        "summary": "Fetch the requesting user, update their data and return the updated user.",
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "example": "any"
                },
                "name": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully fetched and updated.",
            "schema": {
              "type": "object",
              "properties": {
                "user": {
                  "$ref": "#/definitions/PasswordlessUser"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Error. Need to provide both name and email values."
          }
        }
      }
    },
    "/api/v1/users/updateUserPasssword": {
      "patch": {
        "tags": ["Users"],
        "summary": "Fetch the current requesting user by id, update their password and save it to the database.",
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "oldPassword": {
                  "example": "any"
                },
                "newPassword": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully fetched and password updated.",
            "schema": {
              "type": "object",
              "properties": {
                "msg": {
                  "type": "string",
                  "example": "Success! Password Updated."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Error. Need to provide both new and old password values"
          },
          "401": {
            "description": "Error. Invalid credentials."
          }
        }
      }
    },
    "/api/v1/users/{id}": {
      "get": {
        "tags": ["Users"],
        "summary": "Fetch a user by id",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Mongo ObjectID of the user to fetch"
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully fetched.",
            "schema": {
              "type": "object",
              "properties": {
                "user": {
                  "$ref": "#/definitions/PasswordlessUser"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "403": {
            "description": "Requester forbidden to fetch this user."
          },
          "404": {
            "description": "No user with id found."
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Fetch a user by id and delete user.",
        "description": "**ROLE REQUIRED:** admin",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully fetched and deleted."
          },
          "404": {
            "description": "No user with id found."
          }
        }
      }
    },
    "/api/v1/albums/": {
      "get": {
        "tags": ["Albums"],
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": ["Albums"],
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "user": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "patch": {
        "tags": ["Albums"],
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "map((update": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/albums/filter": {
      "get": {
        "tags": ["Albums"],
        "description": "",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "order",
            "in": "query",
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "type": "string"
          },
          {
            "name": "albumName",
            "in": "query",
            "type": "string"
          },
          {
            "name": "artistName",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/albums/{id}": {
      "get": {
        "tags": ["Albums"],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "patch": {
        "tags": ["Albums"],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/albums/{id}/listOfUsersWhoPurchasedThisAlbum": {
      "get": {
        "tags": ["Albums"],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/orders/": {
      "get": {
        "tags": ["Orders"],
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": ["Orders"],
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "orderItems": {
                  "example": "any"
                },
                "subtotal": {
                  "example": "any"
                },
                "tax": {
                  "example": "any"
                },
                "total": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/orders/{id}": {
      "get": {
        "tags": ["Orders"],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "delete": {
        "tags": ["Orders"],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/reviews/": {
      "get": {
        "tags": ["Reviews"],
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/reviews/album/{albumId}": {
      "get": {
        "tags": ["Reviews"],
        "description": "",
        "parameters": [
          {
            "name": "albumId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": ["Reviews"],
        "description": "",
        "parameters": [
          {
            "name": "albumId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "album": {
                  "example": "any"
                },
                "user": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/reviews/{id}": {
      "get": {
        "tags": ["Reviews"],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "delete": {
        "tags": ["Reviews"],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "patch": {
        "tags": ["Reviews"],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "rating": {
                  "example": "any"
                },
                "title": {
                  "example": "any"
                },
                "comment": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/wishlist/": {
      "post": {
        "tags": ["Wishlist"],
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/wishlist/{wishlist_id}/add_album/{album_id}": {
      "patch": {
        "tags": ["Wishlist"],
        "description": "",
        "parameters": [
          {
            "name": "wishlist_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "album_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/v1/wishlist/{wishlist_id}/remove_album/{album_id}": {
      "patch": {
        "tags": ["Wishlist"],
        "description": "",
        "parameters": [
          {
            "name": "wishlist_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "album_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/admin/": {
      "get": {
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/admin/api/albums": {
      "patch": {
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    }
  },
  "definitions": {
    "PasswordlessUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "64d6ca92a15d2e18ab96a2a3"
        },
        "name": {
          "type": "string",
          "example": "John Doe"
        },
        "username": {
          "type": "string",
          "example": "johndoe"
        },
        "email": {
          "type": "string",
          "example": "john@example.com"
        },
        "role": {
          "type": "string",
          "enum": ["user", "admin"]
        },
        "profileImage": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "example": "https://example.com/profile-image.jpg"
            }
          }
        },
        "creditCardInfo": {
          "type": "object",
          "properties": {
            "hashedNumber": {
              "type": "string",
              "example": "1234567890"
            },
            "expiry": {
              "type": "string",
              "example": "12/24"
            },
            "preferredPaymentOption": {
              "type": "string",
              "enum": ["credit card", "paypal", "google pay"]
            }
          }
        }
      },
      "required": ["id", "name", "username", "email", "role"]
    },
    "TokenizedUser": {
      "type": "object",
      "properties": {
        "user": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "John Doe"
            },
            "userId": {
              "type": "string",
              "example": "64ef5885c2a489217c571253"
            },
            "role": {
              "type": "string",
              "enum": ["user", "admin"]
            }
          }
        }
      }
    },
    "UserWithAlbums": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "64d6ca92a15d2e18ab96a2a3"
        },
        "name": {
          "type": "string",
          "example": "John Doe"
        },
        "username": {
          "type": "string",
          "example": "johndoe"
        },
        "email": {
          "type": "string",
          "example": "john@example.com"
        },
        "role": {
          "type": "string",
          "enum": ["user", "admin"]
        },
        "profileImage": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "example": "https://example.com/profile-image.jpg"
            }
          }
        },
        "creditCardInfo": {
          "type": "object",
          "properties": {
            "hashedNumber": {
              "type": "string",
              "example": "1234567890"
            },
            "expiry": {
              "type": "string",
              "example": "12/24"
            },
            "preferredPaymentOption": {
              "type": "string",
              "enum": ["credit card", "paypal", "google pay"]
            }
          }
        },
        "purchasedAlbums": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "example": "64ef50c8c5551074444547bc"
              },
              "user": {
                "type": "string",
                "example": "64d6ca92a15d2e18ab96a2a3"
              },
              "album": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "64d2a94c793389a43fc5a8d6"
                  },
                  "albumName": {
                    "type": "string",
                    "example": "...Baby one more time"
                  },
                  "artistName": {
                    "type": "string",
                    "example": "Britney Spears"
                  },
                  "createdAt": {
                    "type": "string",
                    "example": "2023-08-08T20:45:00.942Z"
                  },
                  "updatedAt": {
                    "type": "string",
                    "example": "2023-08-17T10:10:42.861Z"
                  },
                  "price": {
                    "type": "number",
                    "example": 20.99
                  },
                  "image": {
                    "type": "string",
                    "example": "https://i.scdn.co/image/ab67616d0000b27371cae34ad5a39bdab78af13e"
                  },
                  "spotifyUrl": {
                    "type": "string",
                    "example": "https://api.spotify.com/v1/albums/6r1lh7fHMB499vGKtIyJLy"
                  },
                  "releaseDate": {
                    "type": "string",
                    "example": "2023-07-28T00:00:00.000Z"
                  },
                  "averageRating": {
                    "type": "number",
                    "example": 0
                  },
                  "numOfReviews": {
                    "type": "number",
                    "example": 0
                  }
                },
                "required": [
                  "id",
                  "albumName",
                  "artistName",
                  "createdAt",
                  "updatedAt",
                  "price"
                ]
              }
            },
            "required": ["_id", "user", "album"]
          }
        }
      },
      "required": ["id", "name", "username", "email", "role", "purchasedAlbums"]
    }
  }
}
